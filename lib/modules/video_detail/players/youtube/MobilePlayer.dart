import 'dart:developer';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:googleapis/chat/v1.dart';import 'package:youtube_player_flutter/youtube_player_flutter.dart';import 'package:zen_player/modules/vendors/video.dart';import 'package:zen_player/utils/config.dart';import 'package:zen_player/utils/util.dart';class YouTubeMobilePlayer extends StatefulWidget {  final AppVideo video;  final Function(bool isFullScreen)? onScreenChanges;  YouTubeMobilePlayer({required this.video, this.onScreenChanges});  @override  State<StatefulWidget> createState() {    return _YouTubeMobilePlayerState();  }}class _YouTubeMobilePlayerState extends State<YouTubeMobilePlayer> {  late YoutubePlayerController _controller;  @override  void initState() {    super.initState();    _controller = YoutubePlayerController(        initialVideoId: widget.video.id, flags: YoutubePlayerFlags());  }  @override  Widget build(BuildContext context) {    YoutubePlayer player = YoutubePlayer(      controller: _controller,      showVideoProgressIndicator: false,      aspectRatio: 16 /9 ,      bottomActions: [        CurrentPosition(),        Text(          "/${AppUtility.printDuration(_controller.value.metaData.duration)}",          style: TextStyle(color: Colors.white, fontSize: 12),        ),        ProgressBar(          colors: ProgressBarColors(              playedColor: accentColor, handleColor: accentColor),          isExpanded: true,        ),        FullScreenButton()      ],      progressIndicatorColor: accentColor,      onReady: () {        log("YouTube player ready.");      },    );    return YoutubePlayerBuilder(        onEnterFullScreen: () {          // _controller.fitHeight(Size(MediaQuery.of(context).size.width,          //     MediaQuery.of(context).size.height));          widget.onScreenChanges!(true);        },        onExitFullScreen: () {          widget.onScreenChanges!(false);        },        player: player,        builder: (context, player) {          return Container();        });  }}