import 'dart:developer';import 'package:dio/dio.dart';import 'package:zen_player/modules/vendors/video.dart';import 'package:zen_player/modules/vendors/base_vendor.dart';import 'package:zen_player/modules/vendors/youtube/youtube_parser.dart';class YouTubeVendor implements BaseVendor {  final String secret;  Dio? _client;  final int _maxResult = 30;  YouTubeVendor(this.secret) {    if (this.secret.isEmpty) {      throw ArgumentError("Must provide api key for YouTube.", "secret");    }    _client = Dio(BaseOptions(        baseUrl: "https://www.googleapis.com/youtube/v3",        queryParameters: {"key": this.secret}));    // _client!.interceptors.add(InterceptorsWrapper(onRequest: (option, handler) {    //   // option.queryParameters.addAll({'key': secret});    //   log("request query parameters: ${option.queryParameters.toString()}");    // }));  }  Video? _jsonToVideo(Map json) {    try {      final List thumbnails = json['thumbnail']['thumbnails'] as List;      final String title = (json['title']['runs'] as List).first['text'];      final String uploader = (json['ownerText']['runs'] as List).first['text'];      final String publishTimeStr =          json['publishedTimeText']['simpleText'] ?? "Unknown";      final List descArr = (json['detailedMetadataSnippets'] as List)          .first['snippetText']['runs'];      final String desc = descArr.map((e) => e['text']).join("");      return Video(          title: title,          id: json['videoId'],          thumbnail: thumbnails.last['url'],          pulishedAtStr: publishTimeStr,          description: desc,          uploader: uploader);    } catch (e) {      log("Convert JSON to Video Error: ${e.toString()}");      return null;    }  }  @override  Future<List<Video>> search(String keyword) async {    log("Sending api: $keyword");    if (keyword.isEmpty) {      return [];    }    final List videos = await YouTubeParser.search(keyword);    // videos.forEach((element) {    //   log("Element: ${element.toString()}");    // });    return videos        .where((element) => element != null)        .map((e) => _jsonToVideo(e))        .where((element) => element != null)        .map((e) => e!)        .toList();  }}