import 'package:googleapis/admob/v1.dart';import 'package:moor/moor.dart';import 'package:zen_player/models/database.dart';import 'package:zen_player/models/model.dart';import 'package:zen_player/modules/vendors/video.dart';class PlayListModel extends BaseModel implements Model<AppPlayList> {  final MyDatabase database;  PlayListModel({required this.database}) : super(database);  factory PlayListModel.getInstance() {    return PlayListModel(database: MyDatabase());  }  @override  Future<AppPlayList> findOrCreate(Map<String, dynamic> data) async {    PlayListsCompanion companion = PlayListsCompanion(      isBuiltIn: Value.ofNullable(data["isBuiltIn"]),      updatedAt: Value(DateTime.now()),      createdAt: Value(DateTime.now()),      name: Value.ofNullable(data["name"]),    );    try {      PlayListData playListData =          await (this.database.select(this.database.playLists)                ..where((tbl) => tbl.name.equals(data["name"])))              .getSingle();      return AppPlayList.fromPlayListData(playListData);    } catch (error) {      if (error is StateError) {        PlayListData playListData = await this            .database            .into(this.database.playLists)            .insertReturning(companion);        return AppPlayList.fromPlayListData(playListData);      }      throw error;    }  }  PlayListsCompanion fromPlayList(AppPlayList data, DBTimestamps timestamps) {    return PlayListsCompanion(      id: Value(int.parse(data.id)),      name: Value(data.name),      isBuiltIn: Value(data.isBuiltIn),      createdAt: Value.ofNullable(timestamps.createdAt),      updatedAt: Value.ofNullable(timestamps.updatedAt),    );  }  @override  Future<AppPlayList> insert(AppPlayList data) async {    PlayListsCompanion playListsCompanion = this.fromPlayList(data,        DBTimestamps(createdAt: DateTime.now(), updatedAt: DateTime.now()));    PlayListData createdData = await this        .database        .into(this.database.playLists)        .insertReturning(playListsCompanion);    return AppPlayList.fromPlayListData(createdData);  }  @override  Future<AppPlayList> findById(id) async {    PlayListData playListData =        await (this.database.select(this.database.playLists)              ..where((tbl) => tbl.id.equals(int.parse(id))))            .getSingle();    return AppPlayList.fromPlayListData(playListData);  }  Future<AppPlayList> findByName(String name) async {    PlayListData playListData =        await (this.database.select(this.database.playLists)              ..where((tbl) => tbl.name.equals(name)))            .getSingle();    return AppPlayList.fromPlayListData(playListData);  }}class AppPlayList {  final String id;  final String name;  bool isBuiltIn;  List<AppVideo> videos;  AppPlayList(      {required this.id,      required this.name,      this.videos = const [],      this.isBuiltIn = false});  factory AppPlayList.fromPlayListData(PlayListData data) {    return AppPlayList(        id: data.id.toString(), name: data.name, isBuiltIn: data.isBuiltIn);  }}