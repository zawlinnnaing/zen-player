import 'package:zen_player/models/database.dart';import 'package:zen_player/models/model.dart';import 'package:zen_player/modules/vendors/video.dart';import 'package:moor/moor.dart';class VideoModel extends BaseModel implements Model<AppVideo> {  late final MyDatabase database;  VideoModel({required this.database}) : super(database);  factory VideoModel.getInstance() {    return VideoModel(database: MyDatabase());  }  Future<AppVideo> insert(AppVideo video) async {    final VideosCompanion companion = this._fromAppVideo(video);    VideoData createdData = await this        .database        .into(this.database.videos)        .insertReturning(companion);    return this._fromData(createdData);  }  @override  Future<AppVideo> findOrCreate(Map<String, dynamic> data) {    // TODO: implement findOrCreate    throw UnimplementedError();  }  VideosCompanion _fromAppVideo(AppVideo video) {    return VideosCompanion(        id: Value(video.id),        title: Value(video.title),        description: Value(video.description),        height: Value(video.height),        createdAt: Value(DateTime.now()),        updatedAt: Value(DateTime.now()),        uploader: Value(video.uploader),        publishedAt: Value(video.publishedAt),        publishedAtStr: Value(video.publishedAtStr),        provider: Value(video.provider.toString()),        thumbnailUrl: Value(video.thumbnail),        url: Value(video.url),        width: Value(video.width));  }  AppVideo _fromData(VideoData videoData) {    return AppVideo(        provider: getVideoProviderFromString(videoData.provider),        title: videoData.title,        url: videoData.url,        height: videoData.height,        width: videoData.width,        publishedAtStr: videoData.publishedAtStr,        publishedAt: videoData.publishedAt,        description: videoData.description,        thumbnail: videoData.thumbnailUrl,        uploader: videoData.uploader,        id: videoData.id);  }  @override  Future<AppVideo> findById(id) async {    VideoData videoData = await (this.database.select(this.database.videos)          ..where((t) => t.id.equals(id)))        .getSingle();    return _fromData(videoData);  }}