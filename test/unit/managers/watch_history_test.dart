import 'package:flutter_test/flutter_test.dart';import 'package:moor/ffi.dart';import 'package:zen_player/managers/watch_history.dart';import 'package:zen_player/models/database.dart';import 'package:zen_player/models/playlist.dart';import 'package:zen_player/models/video.dart';import 'package:zen_player/modules/vendors/video.dart';void main() {  late MyDatabase myDatabase;  late VideoModel videoModel;  late PlayListModel playListModel;  late WatchHistoryManager watchHistoryManager;  setUp(() {    myDatabase = MyDatabase.forTest(VmDatabase.memory());    videoModel = VideoModel(database: myDatabase);    playListModel = PlayListModel(database: myDatabase);    watchHistoryManager = WatchHistoryManager(        playListModel: playListModel, videoModel: videoModel);  });  tearDown(() async {    print("Running tear down...");    await myDatabase.deleteAll();    await myDatabase.close();  });  group("WatchHistoryManager Class", () {    test("create", () async {      AppPlayList watchHistoryPlayList = await watchHistoryManager.create();      expect(          watchHistoryPlayList.name, WatchHistoryManager.DEFAULT_PLAYLIST_NAME);    });    test("create only one record, even though called multiple times.",        () async {      await watchHistoryManager.create();      await watchHistoryManager.create();      List<AppPlayList> playlists = await playListModel          .searchByName(WatchHistoryManager.DEFAULT_PLAYLIST_NAME);      expect(playlists.length, 1);    });    test("addVideo - normal flow", () async {      AppVideo mockVideo = AppVideo(          title: "Mock Video",          id: "ABCDEFG",          url: "http://mockurl.com",          provider: AppVideoProvider.YouTube);      await videoModel.findOrCreate(mockVideo.toMap());      await watchHistoryManager.create();      await watchHistoryManager.addVideo(mockVideo);      AppPlayList watchHistory = await playListModel          .findByName(WatchHistoryManager.DEFAULT_PLAYLIST_NAME);      List<AppVideo> watchedVideos =          await playListModel.findVideos(int.parse(watchHistory.id));      expect(watchedVideos.length, 1);      expect(watchedVideos.contains(mockVideo), true);    });  });}