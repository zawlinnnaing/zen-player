import 'package:flutter/material.dart';import 'package:flutter_test/flutter_test.dart';import 'package:redux/redux.dart';import 'package:shared_preferences/shared_preferences.dart';import 'package:zen_player/modules/home/theme_manager.dart';import 'package:zen_player/redux/actions/app.dart';import 'package:zen_player/redux/actions/theme.dart';import 'package:zen_player/redux/middlewares/theme_middleware.dart';import 'package:zen_player/redux/reducers/app.dart';import 'package:zen_player/redux/states/app.dart';void main() {  AppState? appState;  Store<AppState>? store;  setUp(() {    appState = AppState();    store = Store(appReducer, initialState: appState!);  });  group("ThemeMiddleware", () {    SharedPreferences? pref;    ThemeMiddleware? middleware;    setUp(() async {      pref = await SharedPreferences.getInstance();      pref!.remove(ThemeManager.THEME_KEY);      middleware = ThemeMiddleware();    });    test("Update theme in preferences when called updateThemeAction", () async {      ThemeMode themeMode = ThemeMode.light;      middleware!.call(store!, UpdateThemeModeAction(themeMode: themeMode),          (action) => null);      await Future.delayed(Duration(seconds: 3));      expect(await ThemeManager.getTheme(), themeMode);    });    test("No side effect when called unrelated action", () async {      UpdateViewIndexAction unrelationAction = UpdateViewIndexAction(0);      middleware!.call(store!, unrelationAction, (action) => null);      await Future.delayed(Duration(seconds: 3));      expect(await ThemeManager.getTheme(), null);    });  });}